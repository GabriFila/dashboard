import React, { useState } from 'react';
import Utils from '../../services/Utils';
import { withTheme } from '@rjsf/core';
import { Theme as AntDTheme } from '@rjsf/antd';
import { Button, message } from 'antd';
import { widgets } from './CustomWidget';
import { CustomArrayFieldTemplate, fields, fieldsView } from './CustomField';
import { json } from 'generate-schema';
import CustomFieldTemplateViewer from './CustomFieldTemplateViewer';
import { APP_NAME } from '../../constants';
import CustomFieldTemplate from './CustomFieldTemplate';

const Form = withTheme(AntDTheme);

function FormViewer(props) {

  const [showButton, setShowButton] = useState(false);

  const util = Utils();

  let formData;
  let schema;
  let schemaReal = {};

  if(props.show === 'status'){
    try{
      schema = util.OAPIV3toJSONSchema(props.CRD.spec.validation.openAPIV3Schema).properties.status;
    }catch{}
    schema = json(props.CR.status);
    delete schema.$schema;
    formData = props.CR.status;
  }else if(props.show === 'spec'){
    try{
      schemaReal = util.OAPIV3toJSONSchema(props.CRD.spec.validation.openAPIV3Schema).properties.spec;
    }catch{}
    schema = json(props.CR.spec);
    delete schema.$schema;

    /**
     * This set the real schema properties to the leaves
     * of the autogenerated schema
     */
    util.setRealProperties(schema, schemaReal);
    formData = props.CR.spec;
  }else if(props.show === 'metadata'){
    schema = json(props.CR.metadata);
    delete schema.$schema;
    formData = props.CR.metadata;
  }

  const submit = (value) => {
    let item = {
      spec: value.formData
    }

    let namespace = null;

    if(props.CR.metadata.namespace){
      namespace = props.CR.metadata.namespace;
    }

    let promise = window.api.updateCustomResource(
      props.CRD.spec.group,
      props.CRD.spec.version,
      namespace,
      props.CRD.spec.names.plural,
      props.CR.metadata.name,
      item
    );

    promise
      .catch((error) => {
        console.log(error);
        message.error('Could not update the resource');
      });
  }

  return(
    <div>
      <Form
        uiSchema = {{ "ui:disabled": true }}
        schema={schema}
        formData={formData}
        onChange={() => {
          if(!showButton && (props.show === 'spec' && !props.onEditor))
            setShowButton(true);
        }}
        fields={(props.show !== 'spec' || props.onEditor) ? fields : fieldsView}
        FieldTemplate={(props.show !== 'spec' ||props.onEditor) ? CustomFieldTemplate : CustomFieldTemplateViewer}
        ArrayFieldTemplate={CustomArrayFieldTemplate}
        widgets={widgets}
        onSubmit={submit}
      >
        {showButton ? (
          <Button type="primary" htmlType={'submit'} style={{marginTop: 10}}>Save changes</Button>
        ) : <div/>}
      </Form>
    </div>
  )
}

export default FormViewer;
